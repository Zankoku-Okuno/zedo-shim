#!/bin/bash
set -e

die() {
  echo >&2 "$1"
  exit 1
}

__cleanup() {
  set +e
  exec 2>/dev/null # TODO is there any better way to do this?
  if [ -z "$ZEDO__PARENT" ]; then
    kill "$rootErrCatPid"
    kill "$rootErrKeepalivePid"
    rm "$ZEDO__ROOT_ERR"
  fi
}
trap '__cleanup' EXIT TERM INT # TODO any other signals?

verbosity=1
while [ $# -ne 0 ]; do
  case "$1" in
    -h|--help)
      action=help
      break
    ;;
    -q|--quiet) verbosity=$((verbosity - 1)) ;;
    -v|--verbose) verbosity=$((verbosity + 1)) ;;
    -V|--version)
      echo '0.0.0-a'
      exit
    ;;

    -j*|--threads*)
      case "$1" in
        -j|--threads)
          if [ $# -lt 2 ]; then die "missing argument to $1"; fi
          threads="$2"
          shift
          shift
        ;;
        -j*)
          threads="${1#-j}"
          threads="${threads#=}"
          shift
        ;;
        --threads=*)
          threads="${1#--threads=}"
          shift
        ;;
      esac
      if echo "$threads" | grep -qvG '^[0-9]\+$'; then die "invalid number of threads: '$threads'"; fi
    ;;
    --zedo-root*)
      case "$1" in
        --zedo-root)
          if [ $# -lt 2 ]; then die "missing argument to $1"; fi
          root="$2"
          shift
          shift
        ;;
        --zedo-root=*)
          root="${1#--zedo-root=}"
          shift
        ;;
        *) die "unknown argument $1" ;;
      esac
    ;;
    --)
      shift
      action=build
      break
    ;;

    # TODO server: accept a name and arguments
    #   hash the concat of hashes for each argument
    #   start up the program by delegating, and put a socket somewhere
    #   unless that socket already exists, in which case just return the socket path
    #   register the daemon to be stopped when (this script | invocation tree) finishes
    # TODO init, others?
    always|ifchange|ifcreate|if-change|if-create)
      shift
      action=build
      break
    ;;
    phony|volatile)
      action="$1"
      shift
      break
    ;;
    trace)
      shift
      action=trace
      break
    ;;
    help)
      action=help
      break
    ;;
    *)
      action=build
      break
    ;;
  esac
done # done parsing arguments


if [ -z "$ZEDO__TARGET" ]; then
  # unless `--zedo-root` was passed, search from pwd up until a `.zedo` dir is found
  # this search refuses to cross filesystems
  # the passed or discovered root was not valid (didn't have a `.zedo` dir), that's fatal
  # if all is good, we `cd` there and inform all children through `ZEDO__ROOT`
  if [ -n "$root" ]; then
    root="$(realpath "$root")"
  else
    root="$PWD"
    rootDev="$(stat -c '%D' "$root")"
    while [ "$root" != '/' ]; do
      if [ -d "$root/.zedo" ]; then break; fi
      root="$(dirname "$root")"
      if [ "$rootDev" != "$(stat -c '%D' "$root")" ]; then break; fi
    done
    root="$(realpath -ms "$root")"
  fi
  if ! [ -d "$root/.zedo" ]; then die "not a zedo project (or any parent directory)"; fi
  export ZEDO__ROOT="$root"
  cd "$ZEDO__ROOT"

  # set up internal data structures for the run
  ZEDO__ROOT_ERR="$ZEDO__ROOT/.zedo/rooterr.fifo"
  rm -f "$ZEDO__ROOT_ERR"
  mkfifo "$ZEDO__ROOT_ERR"
  tail -f </dev/null >"$ZEDO__ROOT_ERR" & # keep at least one write filehandle open on the fifo
  rootErrKeepalivePid=$!
  cat "$ZEDO__ROOT_ERR" >&2 &
  rootErrCatPid=$!
  export ZEDO__ROOT_ERR
  # NOTE zedo should only use $ZEDO__ROOT_ERR to log to top, only do-scripts can use fd 3

  __logDir="$ZEDO__ROOT/.zedo/log"
  mkdir -p "$__logDir"
  ZEDO__CALLSTACK="$__logDir/callstack.zedolog"
  ZEDO__STACKTRACE="$__logDir/stacktrace.zedolog"
  truncate -s0 "$ZEDO__CALLSTACK"
  [ -e "$ZEDO__STACKTRACE" ] && rm -f "$ZEDO__STACKTRACE"
  export ZEDO__CALLSTACK
  export ZEDO__STACKTRACE

  rm -rf "$ZEDO__ROOT/.zedo/.done"
  rm -rf "$ZEDO__ROOT/.zedo/.when-done"

  # if dirs are set, use them
  # otherwise try loading them from the config file
    # (note that .zedo/config _should_ be checked into source control, but .zedo/config-local _should not_ be
  # if all else fails, initialize some defaults
  __loadConfig() {
    local var val def
    var="$1"
    def="$2"
    val="$(grep "^${var}=" "$ZEDO__ROOT/.zedo/config" 2>/dev/null \
            | head -n1 \
            | sed -e "s/^${var}=\(.*\)/\1/" \
                  -e 's/^\s*\|\s*$//g')" # TODO don't strip leading spaces?
    if [ -z "$val" ]; then val="$def"; fi
    echo "$val"
  }
  if [ -z "$SRC" ]; then
    SRC="$(__loadConfig SRC .)"
    export SRC
  fi
  if [ -z "$BUILD" ]; then
    BUILD="$(__loadConfig BUILD build)"
    export BUILD
    ZTOP="$ZEDO__ROOT/$BUILD"
    export ZTOP
  fi
  if [ -z "$DO" ]; then
    DO="$(__loadConfig DO 'do')"
    export DO
  fi

  # TODO export any invocation-tree options
  export ZEDO__VERBOSITY="$verbosity"

# done initializing the root of the invocation tree
else # if ZEDO__TARGET is set:
  ZEDO__PARENT="$ZEDO__TARGET"
  export ZEDO__PARENT
  cd "$ZEDO__ROOT"
fi
# FIXME this startedFrom variable gets set in the most bonkers way; de-cruft it ASAP
if [ -z "$startedFrom" ]; then
  startedFrom="$(realpath -ms "$ZEDO__ROOT/$SRC")"
elif [ "$startedFrom" = "$(realpath -ms "${startedFrom#"$ZEDO__ROOT/$SRC"}")" ]; then
    startedFrom="$(realpath -ms "$ZEDO__ROOT/$SRC")"
fi




# `__findScript_{init,next}` form a co-routine.
# They communicate through variables which should not be used elsewhere:
#   * `__request` (full path) and `__requestBase`
#   * `__nextDefaultDir`
#   * `__requestExt`, `__nextExt`
# The protocol for use is:
#   1. call `__findScript_init <user request>`
#   2. any problem here causes the whole script to die
#   3. `$targetType` is now set to `{build,src,meta,default}`
#      and `$targetPath` to the requested path relative to the appropriate directory
#      (since it's modifying globals, do not run in a subshell e.g. to capture output)
#   4. the path to target relative to the directory for its type ($SRC, $BUILD, $DO)
#   5. call `__findScript_next`
#   6. it sets `scriptFile` and `targetNoExt`, `targetExt`
#   7. but if the search is done, it returns with a non-zero exit code
__findScript_init() {
  local request="$1"
  # prioritize which of {src,build,do} we should treat it as
  local isSrc=0 isBuild=0 isMeta=0
  case "$request" in
    src:*) isSrc=1; request="${request#src:}" ;;
    build:*) isBuild=1; request="${request#build:}" ;;
    meta:*) isMeta=1; request="${request#meta:}" ;;
    :*) request="${request#:}" ;;
    # TODO is it in $DO, but only if --meta is on
    # TODO is it external, but only if --external is on
  esac
  case "$isMeta$isBuild$isSrc" in
    1??) targetType=meta ;;
    ?1?) targetType=build ;;
    ??1) targetType=src ;;
    *) targetType=default ;;
  esac
  # work out the request path
  # echo >&2 "starting request search at '$request'"
  if [ "${request:0:1}" != '/' ]; then
    if [ -z "$ZEDO__PARENT" ]; then
      request="/$request"
      # echo >&2 "from top: '$request'"
    else
      request="/$(dirname "$ZEDO__PARENT")/$request"
      # echo >&2 "from parent: '$request'"
    fi
  # else echo >&2 "from absolute: '$request'"
  fi
  request="$(realpath -ms "$request")"
  # echo >&2 "normalized: '$request'"
  targetPath="${request#"/"}"
  # initialize state for __findScript_next
  # FIXME what if the ext ends in a dot?
  __request="$request"
  __requestBase="$(basename "$__request")"
  __nextDefaultDir="$(dirname "$request")"
  __requestExt="$(__extractExt "$__requestBase")"
  __nextExt="$__requestExt"
}
__findScript_next() {
  # first-up is the non-default case
  if [ -n "$__request" ]; then
    scriptFile="$(realpath -ms "$ZEDO__ROOT/$DO/${__request}.do")"
    targetNoExt="$(basename "$__request")"
    targetExt=''
    __request=''
    return
  # then, we try to use default with longest extension, but keep shortening
  elif [ -n "$__nextExt" ]; then
    scriptFile="$(realpath -ms "$ZEDO__ROOT/$DO/$__nextDefaultDir/default.${__nextExt}.do")"
    targetNoExt="${__requestBase%.$__nextExt}"
    targetExt="$__nextExt"
    __nextExt="$(__extractExt "$__nextExt")"
  # if extension iteration failed, then try the enxt directory up, resetting extension
  elif [ -n "$__requestExt" ] && [ "$__nextDefaultDir" != '/' ]; then
    __nextDefaultDir="$(dirname "$__nextDefaultDir")"
    __nextExt="$__requestExt"
    __findScript_next
    return $?
  # but if even the directory traversal can't do it, just stop
  else
    scriptFile=''
    targetNoExt=''
    targetExt=''
    return 1
  fi
}
__extractExt() {
  local ext="$1"
  # if no dot, we must be at the last extension part
  case "$ext" in *.*) ;; *) return ;; esac
  while true; do
    ext="${ext#?*.}"
    if [ "${ext:0:1}" = '.' ]; then
      while [ "${ext:0:1}" = '.' ]; do ext="${ext#.}"; done
    else
      break
    fi
  done
  echo "$ext"
}



__zedoSource() {
  local from="$ZEDO__ROOT/$SRC/$targetPath"
  local to="$ZEDO__ROOT/$BUILD/$targetPath"
  echo >>"$ZEDO__CALLSTACK" "from      : $ZEDO__PARENT"
  echo >>"$ZEDO__CALLSTACK" "  | source: $targetPath"
  if ! [ -e "$from" ]; then die "source file does not exist: '$from'"; fi
  if [ "$BUILD" != "$SRC" ]; then
    [ -e "$to" ] && rm "$to"
    mkdir -p "$(dirname "$to")"
    ln "$from" "$to"
    # TODO I wish I could write-protect just the link inside BUILD instead of the SRC copy as well
  fi
  mkdir -p "$(dirname "$ZEDO__ROOT/.zedo/.done/$targetPath")"
  truncate -s0 "$ZEDO__ROOT/.zedo/.done/$targetPath"
  return
}
__zedoBuild() {
  local trySource="$1"
  # echo >&2 "target is ($targetType): $targetPath"
  while __findScript_next; do
    # echo >&2 "    could be: $scriptFile"
    if [ -f "$scriptFile" ]; then
      # echo >&2 "    yep!"
      local to="$ZEDO__ROOT/$BUILD/$targetPath"
      local logFile="$ZEDO__ROOT/.zedo/log/$targetPath.stderr"
      local exeBit arg1 arg2 arg3 ec
      # do-script is called with
      #   $1: target directory relative to type-root
      #   $2: basename of target (without extension for default scripts)
      #   $3: (for default scripts) extension of target including leading dot
      # so the original target is `/$1/$2$3` (default-script or otherwise)
      # and replacing extension is like `/$1/$2.o`
      # or remove leading `/$1` for a relative path14
      # NOTE if you need the path to the output file, you can just use `/dev/fd/1`
      arg1="$(dirname "$targetPath")"
      arg2="$targetNoExt"
      if [ -n "$targetExt" ]; then arg3=".$targetExt"; else arg3=''; fi
      # all parameters set, we are go for execute
      export ZEDO__TARGET="$targetPath"
      mkdir -p "$(dirname "$to")" "$(dirname "$logFile")"
      truncate -s0 "$to"
      if [ -x "$scriptFile" ]; then exeBit=1; else chmod u+x "$scriptFile"; fi
      local owd="$PWD"
      cd "$(dirname "$to")"
      echo >>"$ZEDO__CALLSTACK" "from      : $ZEDO__PARENT"
      echo >>"$ZEDO__CALLSTACK" "  | build : $ZEDO__TARGET"
      set +e
        "$scriptFile" "$arg1" "$arg2" "$arg3" >"$to" 2>"$logFile" 3>"$ZEDO__ROOT_ERR"
        ec=$?
      set -e
      if [ -z "$exeBit" ]; then chmod u-x "$scriptFile"; fi
      if [ -f "$ZEDO__ROOT/.zedo/.when-done/$ZEDO__TARGET" ]; then
        while IFS= read -r line; do
          __zedoCleanup >>"$logFile" 2>&1 "$line"
        done <"$ZEDO__ROOT/.zedo/.when-done/$ZEDO__TARGET"
      fi
      cd "$owd"
      if [ $ec != 0 ]; then
        echo >&2 "do-script failed: '$scriptFile $arg1/$arg2$arg3'"
        echo >>"$ZEDO__STACKTRACE" "$logFile"
        if [ -z "$ZEDO__PARENT" ]; then
          local frameLogFile
          while IFS= read -r frameLogFile; do
            echo >"$ZEDO__ROOT_ERR" "[START LOGFILE] $(basename "$frameLogFile")"
            cat >"$ZEDO__ROOT_ERR" "$frameLogFile"
          done < <(tac "$ZEDO__STACKTRACE")
        fi
        exit $ec
      else
        mkdir -p "$(dirname "$ZEDO__ROOT/.zedo/.done/$targetPath")"
        truncate -s0 "$ZEDO__ROOT/.zedo/.done/$targetPath"
        return 0
      fi
    fi
  done
  if [ "$trySource" = trySource ]; then
    __zedoSource
  else
    die "no do-script found for $targetPath"
  fi
}
__zedoCleanup() { # only call from __zedoBuild
  local cmd="$1"
  shift
  case "$cmd" in
    phony)
      local to="$ZEDO__ROOT/$BUILD/$targetPath"
      [ -f "$to" ] && rm -f "$to"
      echo >>"$ZEDO__CALLSTACK" "  | phony : $ZEDO__TARGET"
    ;; # TODO
    # TODO stop daemon with name & arghash
    done-script)
      # TODO tidy this up
      # pass arguments as for the do-script
      # send any output to the logfile
      echo >>"$ZEDO__CALLSTACK" "  | clean : $ZEDO__TARGET"
      set +e; "${scriptFile}ne"; set -e # that is, execute the `blah.done` file next to `blah.do`
    ;;
    *) ;; # TODO emit warning
  esac
}

case "$action" in

  build)
    # TODO parse opts/flags
    while [ $# -ne 0 ]; do
      __findScript_init "$1"
      shift
      if [ -f "$ZEDO__ROOT/.zedo/.done/$targetPath" ]; then continue; fi
      case "$targetType" in
        src) __zedoSource ;;
        build) __zedoBuild ;;
        default) __zedoBuild trySource ;;
        meta) die "TODO rebuilding do-scripts unimplemented" ;;
      esac
    done
  ;;

  phony)
    if [ -z "$ZEDO__PARENT" ]; then die 'use zedo phony only as part of a do-script'; fi
    mkdir -p "$(dirname "$ZEDO__ROOT/.zedo/.when-done/$ZEDO__PARENT")"
    echo 'phony' >>"$ZEDO__ROOT/.zedo/.when-done/$ZEDO__PARENT"
    # TODO warn if there other arguments
    exit
  ;;
  volatile)
    # This intentionally does nothing.
    # Whereas with `zedo always` would put an always dependency between caller and target,
    # this marks a file itself as always out-of-date.
    # Of course, here everything gets rebuilt all the time anyway, so we don't have to do anything.
    # TODO just warn if there are other arguments
    exit
  ;;

  trace)
    while [ $# -ne 0 ]; do
      echo "Request is: '$1'"
      __findScript_init "$1"
      shift
      echo "  Target (type $targetType) is: '$targetPath'"
      while __findScript_next; do
        echo "  Do-script could be: '${scriptFile#$ZEDO__ROOT/}'"
        if [ -n "$targetExt" ]; then
          echo "    base '$targetNoExt', extension '$targetExt'"
        fi
      done
      echo "  Source could be: '$SRC/$targetPath'"
    done
  ;;

  help)
    echo "fake-zedo: just run some scripts, but do it while pretending to be a redo-like system"
    echo "Usage: zedo [COMMAND] ARGS..."
    echo ""
    echo "zedo is a simple but powerful incremental build system (and interface)"
    echo "It's not widespread, but I want to use it in my projects, so this is a shim which doesn't bother trying to be smart about running build scripts."
    echo "For more information, see: TODO"
    echo ""
    echo "COMMANDS"
    echo "  zedo <no command> REQUESTS...          as the always command"
    echo "  zedo always REQUESTS...                build the requested files (see BUILDING below)"
    echo "  zedo if-{change,create} REQUESTS...    as the always command"
    echo "                                           a true zedo would conditionally run the script"
    echo "  zedo help                              print this message and exit"
    echo ""
    echo "OPTIONS"
    echo "  -h,--help       as the help command above"
    echo "  -V,--version    print the version string (as a plain semver) and exit"
    echo ""
    echo "BUILDING"
    echo ""
    echo "TODO what is the format of a request?"
    echo "If the request starts in a colon, treat type as default (and consume the colon)."
    echo "TODO where are the request paths relative to?"
    echo ""
    echo "Source files are hard-linked into the build directory if necessary."
    echo "For built files, we search for a do-script and invoke it to create the target."
    echo "Meta files are unimplemented TODO"
    echo "If no type is specified, it is treated as a built file,"
    echo "unless no script can be found, in which case it is treated as a source file."
    echo ""
    echo "TODO how do-scripts found?"
  ;;
  *)
    # TODO what should actually happen here?
    echo >&2 "zedo doing nothing"
  ;;

esac
